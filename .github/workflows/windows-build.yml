name: Windows Build

on:
  push:
    branches: [ master, main, dev ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: smartweatherapp/frontend/package-lock.json
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
    
    - name: Install CMake
      uses: lukka/get-cmake@latest
    
    - name: Install frontend dependencies
      working-directory: smartweatherapp/frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: smartweatherapp/frontend
      run: npm run build
    
    - name: Configure CMake
      run: |
        cmake -B build -S . `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
          -DSMARTWEATHERAPP_BUILD_FRONTEND=OFF
    
    - name: Build C++ application
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel
    
    - name: Copy frontend dist to build output
      run: |
        New-Item -ItemType Directory -Force -Path "build\bin\${{ env.BUILD_TYPE }}\smartweatherapp"
        Copy-Item -Path "smartweatherapp\frontend\dist" -Destination "build\bin\${{ env.BUILD_TYPE }}\smartweatherapp\dist" -Recurse -Force
    
    - name: Test executable exists
      run: |
        if (Test-Path "build\bin\${{ env.BUILD_TYPE }}\SmartWeatherApp.exe") {
          Write-Host "✓ SmartWeatherApp.exe found"
        } else {
          Write-Error "✗ SmartWeatherApp.exe not found"
          exit 1
        }
    
    - name: Package artifacts
      run: |
        $artifactDir = "SmartWeatherApp-Windows-x64"
        New-Item -ItemType Directory -Force -Path $artifactDir
        
        # Copy executable
        Copy-Item "build\bin\${{ env.BUILD_TYPE }}\SmartWeatherApp.exe" $artifactDir\
        
        # Copy frontend dist
        Copy-Item -Path "build\bin\${{ env.BUILD_TYPE }}\smartweatherapp" -Destination "$artifactDir\smartweatherapp" -Recurse -Force
        
        # Copy any DLLs if needed
        if (Test-Path "build\bin\${{ env.BUILD_TYPE }}\*.dll") {
          Copy-Item "build\bin\${{ env.BUILD_TYPE }}\*.dll" $artifactDir\
        }
        
        # Create README
        @"
        # SmartWeatherApp - Windows Release
        
        ## Setup
        1. Set your OpenWeather API key as environment variable:
           ```
           setx OPENWEATHER_API_KEY "your_api_key_here"
           ```
        2. Run SmartWeatherApp.exe
        
        ## Requirements
        - Windows 10/11 with WebView2 Runtime (usually pre-installed)
        - Internet connection for weather data
        
        Built on: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
        Commit: ${{ github.sha }}
        "@ | Out-File -FilePath "$artifactDir\README.txt" -Encoding UTF8
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: SmartWeatherApp-Windows-x64
        path: SmartWeatherApp-Windows-x64/
        retention-days: 30
    
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          SmartWeatherApp-Windows-x64/**/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
